0x00000000 0x00000000 0x00000000 0x00000000 ###### START OP_READY, goto 0x000; goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x08880880 0x00000006 ###### START OP_RETURN (0), R0 = dev{0}[6]
0x22800000 0x00000013 # R0 <>, goto 0x013
0x7A22A000 0x00000012 # R0 - R0 <=>, goto 0x11
0x0888A000 0x00000001 # R0 = R0 - 1
0x08800180 0x00000006 # dev{0}[6] = R0
0x08889000 0x00000010 # R0 = R0 + 16
0x08080880 0x00000000 # R0 = dev{0}[R0]
0x08892000 0xFFFF0000 # R1 = R0 & 0xFFFF0000
0x09896000 0x00000010 # R1 = R1 >> 16
0x08882000 0x0000FFFF # R0 = R0 & 0x0000FFFF
0x08800180 0x00000004 # dev{0}[4] = R0
0x09800180 0x00000005 # dev{0}[5] = R1
0x00000000 0x00000001 # PC += 1, goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x08000600 0x00000000 ###### START OP_PUSH (1), push NEXT_LINE
0x00000000 0x00000002 # PC += 2, goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x08000C00 0x00000000 ###### START OP_POP (2), pop
0x00000000 0x00000001 # PC += 1, goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x08080C00 0x00000000 ###### START OP_ADD (3), R0 = pop
0x08090C00 0x00000000 # R1 = pop
0x08109200 0x00000000 # push R0 + R1
0x00000000 0x00000001 # PC += 1, goto 0
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x08080C00 0x00000000 ###### START OP_SUBTRACT (4), R0 = pop
0x08090C00 0x00000000 # R1 = pop
0x0810A200 0x00000000 # push R0 - R1
0x00000000 0x00000001 # PC += 1, goto 0
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x08080C00 0x00000000 ###### START OP_MULTIPLY (5), R0 = pop
0x08090C00 0x00000000 # R1 = pop
0x0810B200 0x00000000 # push R0 * R1
0x00000000 0x00000001 # PC += 1, goto 0
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x08080C00 0x00000000 ###### START OP_DIVIDE (6), R0 = pop
0x08090C00 0x00000000 # R1 = pop
0x0810C200 0x00000000 # push R0 / R1
0x00000000 0x00000001 # PC += 1, goto 0
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x08080C00 0x00000000 ###### START OP_NEGATE (7), R0 = pop
0x08008200 0x00000000 # push -R0
0x00000000 0x00000001 # PC += 1 goto 0
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0xB8880800 0x00900007 ###### START OP_READ (8): R0 = dev{0}[7]; <= goto 144
0x08880B00 0x00000002 # push dev{0}[2], dev{0}[2] = dev{0}[2]
0x00000000 0x00000001 # PC += 1, goto 0
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x08800D80 0x00000003 ###### START OP_PRINT (9), dev{0}[3] = pop
0x00000000 0x00000001 # PC += 1, goto 0
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x08080C00 0x00000000 ###### START OP_PRINT_MEM (10), R0 = pop
0x08000C40 0x00000000 # RD = pop
0x08080800 0x00000000 # R0 = dev{RD}[R0]
0x08800280 0x00000003 # dev{0}[3] - R0
0x00000000 0x00000001 # PC += 1, goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x08080C00 0x00000000 ######## START OP_DRAW (11), R0 = pop
0x08090C00 0x00000000 # R1 = pop
0x080A0C00 0x00000000 # R2 = pop
0x09895000 0x00000008 # R1 = R1 << 8
0x08183000 0x00000000 # R0 = R0 | R1
0x0A00A284 0x00000000 # dev{4}[R0] = R2
0x00000000 0x00000001 # PC += 1, goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x00000000 0x00000000 # goto 0x000
0x0808
# OP_LOAD (12):
#   R0 = pop
#   RD = pop
#   push dev{RD}[R0]
#   PC += 1, goto 0

# OP_STORE (13):
#   R0 = pop
#   RD = pop
#   R1 = pop
#   dev{RD}[R0] = R1
#   PC += 1, goto 0

# OP_COMPARE (14):
#   R0 = pop
#   R1 = pop
#   R0 = R0 - R1
#   R1 = NEXT_LINE
#   push R0 <-+-> R1
#   # Double wide instruction
#   PC += 2, goto 0

# OP_SWAP (15):
#   R0 = pop
#   R1 = pop
#   push R0
#   push R1
#   PC += 1, goto 0

# OP_AND (16):
#   R0 = pop
#   R1 = pop
#   push R0 & R1
#   PC += 1, goto 0

# OP_OR (17):
#   R0 = pop
#   R1 = pop
#   push R0 | R1
#   PC += 1, goto 0

# OP_NOT (18):
#   R0 = pop
#   push ~R0
#   PC += 1, goto 0

# OP_LEFT_SHIFT (19):
#   R0 = pop
#   R1 = pop
#   push R0 < < R1 # Don't ask about the space...
#   PC += 1, goto 0

# OP_RIGHT_SHIFT (20):
#   R0 = pop
#   R1 = pop
#   push R0 > > R1
#   PC += 1, goto 0

# OP_MODULO (21):
#   R0 = pop
#   R1 = pop
#   push R0 % R1
#   PC += 1, goto 0

# OP_JUMP (22):
#   pop R0
#   pop R1 <>, goto JUMP
#   PC += 1, goto 0
#   JUMP:
#     dev{0}[4] = R0
#     # Since we just jumped, we don't have to worry about changing PC
#     goto 0

# OP_GOSUB (23):
#   pop R0
#   pop R1
#   pop R2 <>, goto GOTO
#   PC += 1, goto 0
#   GOTO:
#     # Get the current program counter
#     R2 = dev{0}[4]
#     # Get the current program device
#     R3 = dev{0}[5]
#     # Combine them together to get the subroutine return location
#     R3 = R3 << 16
#     R2 = R2 | R3
#     # Get the location to write the subroutine return location to
#     R3 = dev{0}[6]
#     R3 = R3 + 16
#     # Save the subroutine return location
#     dev{0}[R3] = R2
#     # Calculate the new subroutine stack depth
#     R3 = R3 - 15
#     # Save the stack depth
#     dev{0}[6] = R3
#     # Set the program counter and program device
#     dev{0}[4] = R0
#     dev{0}[5] = R1
#     # Don't change the program counter!
#     goto 0
#

# OP_DRAW_SPRITE (24):
#   # SCREN MEM INDEX: R0
#   # SPRITE_OFFSET: R1
#   # WIDTH: R2
#   # HEIGHT: R3
#   # DRAWING X: R4
#   # DRAWING Y: R5
#   # SPRITE MEM INDEX: R6
#   # SPRITE MEM DATA: R7
#   R0 = pop # X position of the sprite
#   R1 = pop # Y position of the sprite
#   R1 = R1 << 8
#   R0 = R0 | R1 # Memory position of the start of the sprite
#   R1 = pop # ID of the sprite
#   R1 = dev{5}[R0] # Data for the sprite
#   R2 = R1 >> 24 # Width of the sprite
#   R3 = R1 >> 16
#   R3 = R3 & 0xFF # Height of the sprite
#   R1 = R1 & 0xFFFF # Location of the start of the sprite data
#   R4 = 0 # X location of the drawing
#   R5 = 0 # Y location of the drawing
#   R6 = R1
#   DRAW_COL:
#     DRAW_ROW:
#       R7 = dev{5}[R6]
#       dev{4}[R0] = R7
#       goto CONTINUE
#       goto 0x000
#       CONTINUE:
#         R6 = R6 + 1
#         R0 = R0 + 1
#         R4 = R4 + 1
#         R4 - R2 >, goto DRAW_ROW
#     R6 = R6 - R2 
#     R6 = R6 + 0x0100
#     R4 = 0
#     R5 = R5 + 1
#     R5 - R3 >, goto DRAW_COL

# OP_NO_OP (25)